#!/usr/bin/env ruby

require 'csv'
require 'neography'
require 'pry'


def first_non_empty_field row, *fields
  fields.each do |field|
    val = (row[field]||'').strip
    return val unless val.empty?
  end
  return false
end

class LogEntry < Struct.new(:correlation_id,:underlying_csv_row)
  def self.from_csv_row(row)
    correlation_id = first_non_empty_field( row, 'Correlation_ID','tmps_correlation_id' ) || 'MISSING_CORRELATION_ID'
    new(correlation_id,row)
  end

  def load_into(neo)
    corr_node = find_or_create_corr_node(neo,self.correlation_id)
    request_node = create_request_node(neo)
    neo.create_relationship("part_of",request_node,corr_node)
  end

  def create_request_node(neo)
    node = neo.create_node(self.underlying_csv_row.to_hash)
    neo.set_label(node,'Request')
    node
  end

  def find_or_create_corr_node(neo,correlation_id)
    node = neo.create_unique_node('corr', 'correlation_id', correlation_id,{"name"=>correlation_id})
    if node
      neo.set_label(node,'Correlation')
      node
    else
      neo.get_node_index('corr', 'correlation_id', correlation_id)
    end
  end
end

$NEO = Neography::Rest.new


def prep_neo(neo)
  neo.create_node_index('corr')
end

CSV.new(ARGF, headers: true).each.with_index do |row,idx|
  log_entry = LogEntry.from_csv_row(row)
  puts log_entry.correlation_id

  log_entry.load_into($NEO)
end
       
